#!/bin/bash
# Filename:      kantan
# Purpose:       main interface to the kantan test suite
# Authors:       (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################

set -u

# global settings {{{
PN=$(basename $0)
VERSION="$(dpkg --list ${PN} 2>/dev/null| awk '/^i/ {print $3}')"
[ -n "${VERSION:-}" ] || VERSION="unknown"
CLIENTNAME="default"
# }}}

# helper functions {{{
info() {
  printf "Info: $*\n"
}

warn() {
  printf "Warn: $*\n"
}

error() {
  printf "Error: $*\n">&2
}

cleanup() {
  set +e
  [ -n "${socat_pid:-}" ] && kill -9 "$socat_pid" &>/dev/null
  [ -n "${http_pid_scripts:-}" ] && kill -9 "$http_pid_scripts" &>/dev/null
  [ -n "${http_pid_debs:-}" ] && kill -9 "$http_pid_debs"  &>/dev/null
  [ -n "${kvm_pid:-}" ] && kill -9 "$kvm_pid" &>/dev/null
  [ -n "${vde_pid:-}" ] && kill -9 "$vde_pid" &>/dev/null
  [ -n "${terminate_pid:-}" ] && kill -9 "$terminate_pid" &>/dev/null
  [ -f "${tmpfile:-}" ] && rm -f "$tmpfile"
  [ -e "${monitorfile:-}" ] && rm -f "$monitorfile"
  if [ "${TYPE:-}" == "server" ] ; then
    rm -rf "${PROFILE_DIRECTORY}/vde_switch"
  fi
}

bailout() {
  cleanup
  [ -n "${1:-}" ] && exit "$1" || exit 1
}

usage() {
 printf "${PN} ${VERSION} - test suite for autotesting software using Grml + KVM

 Usage:

   ${PN} --profile <profile_directory> --type server --disk <disk.img> \
         --iso <grml.iso> --bootdir </mnt/point/of/iso/>

     or

   ${PN} --profile <profile_directory> --type client --disk <disk.img> \
         [--name <name>] [--kvm <kvm_arguments>]

   ${PN} --help      -- display usage instructions (this screen)
   ${PN} --version   -- display version information and exit

Copyright (c) 2011, Michael Prokop <mika@grml.org>
"
}
# }}}

trap bailout 1 2 3 3 6 9 14 15

# server handling {{{
server_execution() {
  VDE_SWITCH="${PROFILE_DIRECTORY}/vde_switch"
  mkdir -m 700 -p "$VDE_SWITCH"

  monitorfile="${PROFILE_DIRECTORY}/kvm_server.monitor"

  # checks
  if [ -z "${BOOT_DIR:-}" ] ; then
    error "bootdir option is unset, --bootdir is mandatory."
    bailout
  fi

  if ! [ -d "${BOOT_DIR}" ] ; then
    error "boot directory $BOOT_DIR does not exist"
    bailout
  fi

  if ! [ -d "${PROFILE_DIRECTORY}/share/" ] ; then
    error "${PROFILE_DIRECTORY}/share/ not found."
    bailout
  fi

  . "${PROFILE_DIRECTORY}/server.cfg"

  current_working_dir=$(pwd)

  vde_switch -s ${VDE_SWITCH} &
  vde_pid="$!"

  KERNEL=$(find ${BOOT_DIR} -name linux26 -print0)
  INITRD=$(find ${BOOT_DIR} -name initrd.gz -print0)

  if [ -z "${KERNEL:-}" ] ; then
    error "no kernel file linux26 found inside $BOOT_DIR" >&2
    bailout
  fi

  if [ -z "${INITRD:-}" ] ; then
    error "no initrd file initrd.gz found inside $BOOT_DIR" >&2
    bailout
  fi

  info "Starting up kvm server instance"
  info "Connect via serial console: 'sudo screen -m /dev/pts/\$ID 115200 || cu -l /dev/pts/\$ID'"
  info "Connect to monitor console: 'socat - UNIX-CONNECT:${monitorfile}'"
  info "Enable VNC via: 'echo change vnc :0 | socat - UNIX-CONNECT:${monitorfile}'"
  info "Stop execution via entering 'quit'"

  tmpfile=$(mktemp)
  socat -u TCP-LISTEN:8888,reuseaddr,fork - > "${tmpfile}" &
  socat_pid="$!"

  info "Serving ${PROFILE_DIRECTORY}/share/ to port 8000 for netscript bootoption."
  cd "${PROFILE_DIRECTORY}/share/"
  python -m SimpleHTTPServer 8000 &>/dev/null &
  http_pid_scripts="$!"

  cd "$current_working_dir"

  if ! [ -d "${PROFILE_DIRECTORY}/debs" ] ; then
    warn "No directory ${PROFILE_DIRECTORY}/debs/ found, will not serve local Debian packages."
  else
    cd "${PROFILE_DIRECTORY}/debs"

    if ! which dpkg-scanpackages &>/dev/null ; then
      error "dpkg-scanpackages not available, please install package dpkg-dev."
      bailout
    fi

    dpkg-scanpackages . | gzip > Packages.gz
    python -m SimpleHTTPServer 8080 &>/dev/null &
    http_pid_debs="$!"
  fi

  cd "$current_working_dir"

  # default to vde:
  VLAN1="-net vde,sock=${VDE_SWITCH},vlan=1"
  # but if VLAN1_DEVICE is configured then use tap devices instead:
  if [ -z "${VLAN1_DEVICE:-}" ] ; then
    info "Using vde_switch setup (configure VLAN1_DEVICE to use tap instead)."
  else
    info "Using tap setup as VLAN1_DEVICE is configured."
    VLAN1="-net tap,vlan=1,ifname=$VLAN1_DEVICE"
  fi

  if [ -z "${KVMSERVER_APPEND:-}" ] ; then
    KVMSERVER_APPEND="boot=live ignore_bootid noquickconfig netscript=http://10.0.2.2:8000/netscript.sh console=tty1 console=ttyS0"
  fi

  info "Starting KVM instance"
  kvm -k en-us -m "${MEMORY:-1024}" -serial pty \
      -net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=0,model=virtio \
      -net user,vlan=0 \
      -net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=1,model=virtio \
      -monitor unix:${monitorfile},server,nowait \
      $VLAN1 \
      -hda "${DISK}" -cdrom "${ISO_FILE}" -kernel "${KERNEL}" -initrd "${INITRD}" \
      -append "${KVMSERVER_APPEND} ${KVM_ARGUMENTS:-}" -vnc none ${KVM_ARGS:-} &
  kvm_pid="$!"

  terminate_check $kvm_pid &
  terminate_pid="$!"

  console
}
# }}}

# client handling {{{
client_execution() {
  VDE_SWITCH="${PROFILE_DIRECTORY}/vde_switch"

  monitorfile="${PROFILE_DIRECTORY}/kvm_client_${CLIENTNAME}.monitor"

  if [ -n "$CLIENTNAME" ] ; then
    if [ -r "${PROFILE_DIRECTORY}/${CLIENTNAME}.cfg" ] ; then
      info "Reading configuration file ${PROFILE_DIRECTORY}/${CLIENTNAME}.cfg"
      . "${PROFILE_DIRECTORY}/${CLIENTNAME}.cfg"
    else
      info "Configuration file ${PROFILE_DIRECTORY}/${CLIENTNAME}.cfg not found, using defaults."
    fi
  fi

  if ! [ -r ${VDE_SWITCH} ] ; then
    error "could not retrive vde_switch socket ${VDE_SWITCH}"
    error "Server process not running yet?"
    bailout
  fi

  info "Enable VNC via: 'echo change vnc :1 | socat - UNIX-CONNECT:${monitorfile}'"

  if [ -n "${ISO_FILE:-}" -a -r "${ISO_FILE:-}" ] ; then
    KVM_CDROM="-cdrom ${ISO_FILE}"
  fi

  if [ -z "${KVM_CMDLINE:-}" ] ; then
    KVM_CMDLINE="kvm -k en-us -m ${CLIENT_MEMORY:-512} -serial pty \
-net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=1,model=virtio \
-net vde,sock=${VDE_SWITCH},vlan=1 \
-monitor unix:${monitorfile},server,nowait \
${KVM_CDROM:-} -hda ${DISK} ${KVM_ARGUMENTS:-} -vnc none" # -boot once=d
  fi

  printf "Invoking KVM using the following cmdline:\n
  $KVM_CMDLINE\n"

  $KVM_CMDLINE &
  kvm_pid="$!"

  terminate_check $kvm_pid &
  terminate_pid="$!"

  console
}
# }}}

# termination secret {{{
terminate_check() {
  if [ -n "${KANTAN_TERMINATE_SECRECT:-}" ] ; then
    info "Termination secret $KANTAN_TERMINATE_SECRECT enabled, awaiting string."
  else
    return 0
  fi

  if ! [ -r "${tmpfile:-}" ] ; then
    error "Could not read ${tmpfile:-}"
    return 1
  fi

  terminate=false
  while ! $terminate ; do
    if grep -q "${KANTAN_TERMINATE_SECRECT}" ${tmpfile:-} ; then
      info "Termination string ${KANTAN_TERMINATE_SECRECT} found, terminating KVM..."
      terminate=true
      cleanup
      kill ${1:-} $$
    fi
    sleep 5
  done
}
# }}}

# simple console prompt {{{
console() {
  sleep 2
  printf "\nEnter control command: [help|data|quit|pause|cont]\nprompt\$ "

  while read s ; do
    printf 'prompt$ '
    case "$s" in
      help)
         printf "
 Usage instructions:

  quit  Cancel execution of KVM and immediately exit .
  pause Interrupt KVM process for later resuming using 'cont'.
  cont  Continue execution of paused KVM process.
  data  Display data that has been received from KVM server instance.\n"

         printf 'prompt$ '
         ;;
      data)
         if [ -r "${tmpfile:-}" ] ; then
           printf "Data from KVM instance:\n"
           cat "$tmpfile"
           printf 'prompt$ '
         else
           printf "No data from KVM instance received yet.\n"
           printf 'prompt$ '
         fi
         ;;
      pause)
         printf "Pausing KVM process (use 'cont' to continue execution)\n"
         kill -s STOP $kvm_pid
         printf 'prompt$ '
         ;;
      cont)
         printf "Continuing KVM process (use 'pause' to pause execution again)\n"
         kill -s CONT $kvm_pid
         printf 'prompt$ '
         ;;
      exit|quit)
         bailout 0
         ;;
    esac
  done
}
# }}}

# cmdline parsing {{{
_options=$(getopt --name kantan -o +b:d:i:k:n:p:t:hv --long \
  bootdir:,disk:,iso:,kvm:,name:,profile:,type:,help,verbose,version -- "$@")

[ $? -ne 0 ] && { usage ; bailout ; }

eval set -- "$_options"

while :; do
  case "${1:-}" in
    --bootdir|-b)
      shift ; BOOT_DIR="${1}"
      ;;
    --disk|-d)
      shift ; DISK="${1}"
      ;;
    --iso|-i)
      shift ; ISO_FILE="${1}"
      ;;
    --kvm|-k)
      shift ; KVM_ARGUMENTS="${1}"
      ;;
    --name|-n)
      shift ; CLIENTNAME="${1}"
      ;;
    --profile|-p)
      shift ; PROFILE_DIRECTORY="${1}"
      ;;
    --type|-t)
      shift ; TYPE="${1}"
      ;;
    --verbose)
      if [ "${DEBUG:-}" ]; then
        DEBUG=$(expr $DEBUG + 1)
      else
        DEBUG=1;
      fi
      ;;
    --help|-h)
      usage ; exit 0
      ;;
    --version|-v)
      echo "${PN}, version ${VERSION}" ; bailout 0
      ;;
    --)
      shift; break
      ;;
    *)
      error "internal getopt error."
      bailout
      ;;
  esac
  shift
done
# }}}

# execution checks {{{
if [ -z "${PROFILE_DIRECTORY:-}" ] ; then
  error "profile option is unset, --profile is mandatory." ; bailout
fi

if [ -z "${TYPE:-}" ] ; then
  error "executionttype option is unset, --type is mandatory." ; bailout
fi

if [ -z "${DISK:-}" ] ; then
  error "harddisk option is unset, --disk is mandatory." ; bailout
fi

if ! [ -r "${DISK:-}" ] ; then
  error "harddisk $DISK could not be found."
  echo  "NOTE: to create it execute e.g.:
  qemu-img create $DISK 3G"
  bailout
fi

if ! [ -d "${PROFILE_DIRECTORY:-}" ] ; then
  error "profile directory $PROFILE_DIRECTORY does not exist." ; bailout
fi
# }}}

# main execution {{{
case "$TYPE" in
  server) server_execution ;;
  client) client_execution;;
       *) error "unsupported --type argument, exiting." ; bailout ;;
esac

bailout 0
# }}}

## END OF FILE #################################################################
# vim: ai tw=100 expandtab foldmethod=marker shiftwidth=2
