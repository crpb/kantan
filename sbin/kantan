#!/bin/bash
# Filename:      kantan
# Purpose:       main interface to the kantan test suite
# Authors:       (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################

set -e
set -u

info() {
  printf "Info: $*\n"
}

warn() {
  printf "Warn: $*\n"
}

error() {
  printf "Error: $*\n">&2
}

bailout() {
  set +e
  [ -n "${socat_pid:-}" ] && kill -9 "$socat_pid" &>/dev/null
  [ -n "${http_pid_scripts:-}" ] && kill -9 "$http_pid_scripts" &>/dev/null
  [ -n "${http_pid_debs:-}" ] && kill -9 "$http_pid_debs"  &>/dev/null
  [ -n "${kvm_pid:-}" ] && kill -9 "$kvm_pid" &>/dev/null
  [ -n "${vde_pid:-}" ] && kill -9 "$vde_pid" &>/dev/null
  [ -d "${tmpfile:-}" ] && rm -f "$tmpfile"
  [ "$TYPE" == "server" ] && [ -d /tmp/kantan_share/ ] && rm -rf /tmp/kantan_share/
  [ -n "${1:-}" ] && exit "$1" || exit 1
}

trap bailout 1 2 3 3 6 9 14 15

usage() {
 printf "$0 - simple test suite for autotesting software using Grml + KVM

 Usage:

   $0 server <disk.img> <grml.iso> </mnt/point/of/iso/>

     or

   $0 client <disk.img> [<name>] [kvm_arguments]

   $0 help   -- display usage instructions (this screen)
   $0 server -- start main KVM instance
   $0 client -- start client KVM instance

Copyright (c) 2010, Michael Prokop <mika@grml.org>
"
}

if [[ "${1:-}" == "help" ]] || [[ "${1:-}" == "--help" ]] || [[ -z "${1:-}" ]] ; then
  usage
  exit 0
fi

VDE_SWITCH='/tmp/kantan_share/vde_switch'

# server handling
server_execution() {
  . /etc/kantan/server.cfg

  current_working_dir=$(pwd)

  if ! [ -d "${ISO_MOUNT}/boot" ] ; then
    error "Error: no directory /boot found on $ISO_MOUNT - forgot to mount ISO?"
    exit 1
  fi

  [ -d /tmp/kantan_share ] || mkdir -m 700 /tmp/kantan_share
  vde_switch -s ${VDE_SWITCH} &
  vde_pid="$!"

  KERNEL=$(find ${ISO_MOUNT}/boot -name linux26 -print0)
  INITRD=$(find ${ISO_MOUNT}/boot -name initrd.gz -print0)

  if [ -z "${KERNEL:-}" ] ; then
    error "Error: no kernel file linux26 found on mount point $ISO_MOUNT"
    exit 1
  fi

  if [ -z "${INITRD:-}" ] ; then
    error "Error: no initrd file initrd.gz found on mount point $ISO_MOUNT"
    exit 1
  fi

  info "Starting up kvm server instance"
  info "Connect via VNC: 'vncviewer localhost'"
  info "Connect via serial console: 'sudo screen -m /dev/pts/\$ID 115200 || cu -l /dev/pts/\$ID'"
  info "Stop execution via entering 'quit'"

  tmpfile=$(mktemp)
  socat -u TCP4-LISTEN:8888,reuseaddr,fork - > "${tmpfile}" &
  socat_pid="$!"

  info "Serving /usr/share/kantan/scripts/ to port 8000 for netscript bootoption."
  cd /usr/share/kantan/scripts/
  python -m SimpleHTTPServer 8000 &>/dev/null &
  http_pid_scripts="$!"

  cd "$current_working_dir"

  if ! [ -d "debs" ] ; then
    warn "No directory debs/ found, will not serve local Debian packages."
  else
    cd debs

    if ! which dpkg-scanpackages &>/dev/null ; then
      error "dpkg-scanpackages not available, please install package dpkg-dev."
      exit 1
    fi

    dpkg-scanpackages . | gzip > Packages.gz
    python -m SimpleHTTPServer 8080 &>/dev/null &
    http_pid_debs="$!"
  fi

  cd "$current_working_dir"

  # default to vde:
  VLAN1="-net vde,sock=${VDE_SWITCH},vlan=1"
  # but if VLAN1_DEVICE is configured then use tap devices instead:
  if [ -z "${VLAN1_DEVICE:-}" ] ; then
    info "Using vde_switch setup (configure VLAN1_DEVICE to use tap instead)."
  else
    info "Using tap setup as VLAN1_DEVICE is configured."
    VLAN1="-net tap,vlan=1,ifname=$VLAN1_DEVICE"
  fi

  if [ -z "${KVMSERVER_APPEND:-}" ] ; then
    KVMSERVER_APPEND="boot=live ignore_bootid noquickconfig netscript=http://10.0.2.2:8000/netscript.sh console=tty1 console=ttyS0"
  fi

  info "Starting KVM instance"
  kvm -k en-us -m "${MEMORY:-1024}" -serial pty \
      -net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=0,model=virtio \
      -net user,vlan=0 \
      -net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=1,model=virtio \
      $VLAN1 \
      -hda "${HDA}" -cdrom "${ISO_FILE}" -kernel "${KERNEL}" -initrd "${INITRD}" \
      -append "${KVMSERVER_APPEND} ${ADDITIONAL_KVMSERVER_ARGS:-}" -vnc :0 ${KVM_ARGS:-} &
  kvm_pid="$!"

  console
}

# client handling
client_execution() {
  if [ -n "$CLIENTNAME" ] ; then
    if [ -r "/etc/kantan/${CLIENTNAME}.cfg" ] ; then
      info "Reading configuration file /etc/kantan/${CLIENTNAME}.cfg"
      . "/etc/kantan/${CLIENTNAME}.cfg"
    else
      info "Configuration file /etc/kantan/${CLIENTNAME}.cfg not found, using defaults."
    fi
  fi

  if ! [ -r ${VDE_SWITCH} ] ; then
    error "Error retreiving vde_switch socket ${VDE_SWITCH}"
    error "Server process not running yet?"
    exit 1
  fi

  # default if unset
  [ -z "${CLIENT_ISO:-}" ] && CLIENT_ISO='/usr/share/kantan/netboot/ipxe.iso'

  if [ -z "${KVM_CMDLINE:-}" ] ; then
    KVM_CMDLINE="kvm -k en-us -m ${CLIENT_MEMORY:-512} \
-net nic,macaddr=$(python /usr/share/kantan/scripts/random_mac.py),vlan=1,model=virtio \
-net vde,sock=${VDE_SWITCH},vlan=1 \
-cdrom ${CLIENT_ISO} -hda ${HDA} ${CLIENT_ARGS:-}" # -boot once=d
  fi

  printf "Invoking KVM using the following cmdline:\n
  $KVM_CMDLINE\n"

  $KVM_CMDLINE &
  kvm_pid="$!"

  console
}

# simple console prompt
console() {
  sleep 2
  printf "\nEnter control command: [help|data|quit|pause|cont]\nprompt\$ "

  while read s ; do
    printf 'prompt$ '
    case "$s" in
      help)
         printf "
 Usage instructions:

  quit  Cancel execution of KVM and immediately exit .
  pause Interrupt KVM process for later resuming using 'cont'.
  cont  Continue execution of paused KVM process.
  data  Display data that has been received from KVM server instance.\n"

         printf 'prompt$ '
         ;;
      data)
         if [ -r "${tmpfile:-}" ] ; then
           printf "Data from KVM instance:\n"
           cat "$tmpfile"
           printf 'prompt$ '
         else
           printf "No data from KVM instance received yet.\n"
           printf 'prompt$ '
         fi
         ;;
      pause)
         printf "Pausing KVM process (use 'cont' to continue execution)\n"
         kill -s STOP $kvm_pid
         printf 'prompt$ '
         ;;
      cont)
         printf "Continuing KVM process (use 'pause' to pause execution again)\n"
         kill -s CONT $kvm_pid
         printf 'prompt$ '
         ;;
      exit|quit)
         bailout 0
         ;;
    esac
  done
}

# main execution
TYPE="${1:-}"
HDA="${2:-}"

if [[ "${1:-}" == "server" ]] ; then
  # check args
  if [[ -z "${4:-}" ]] ; then
    usage
    exit 1
  fi

  ISO_FILE="${3:-}"
  ISO_MOUNT="${4:-}"

  if [ -n "${5:-}" ] ; then
    ADDITIONAL_KVMSERVER_ARGS="$5"
  fi

  server_execution

elif [[ "${1:-}" == "client" ]] ; then
  # check args
  if [[ -z "${2:-}" ]] ; then
    usage
    exit 1
  fi

  if [ -n "${3:-}" ] ; then
    CLIENTNAME="${3:-}"
  fi

  if [ -n "${4:-}" ] ; then
    CLIENT_ARGS="$4"
  fi

  client_execution
else
  error "Error: Unsupported argument '${1}' - exiting."
  exit 1
fi

bailout 0

## END OF FILE #################################################################
